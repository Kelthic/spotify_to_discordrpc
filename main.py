import time
import logging
import configparser
from pypresence import Presence
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import os
import shutil

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞
def backup_log_file(log_filename):
    if os.path.exists(log_filename):
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±—ç–∫–∞–ø
        for i in range(1, 10):
            backup_filename = f"{log_filename}.backup_{i}"
            if not os.path.exists(backup_filename):
                shutil.copy(log_filename, backup_filename)  # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥ –≤ –±—ç–∫–∞–ø
                print(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_filename}")
                return
        # –ï—Å–ª–∏ –≤—Å–µ –±—ç–∫–∞–ø—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ 1-9 —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        shutil.copy(log_filename, f"{log_filename}.backup_9")
        print("–í—Å–µ –±—ç–∫–∞–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞
def reset_log(log_filename):
    if os.path.exists(log_filename):
        backup_log_file(log_filename)  # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        with open(log_filename, 'w'):
            pass  # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
log_dir = './logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –∏ –±—ç–∫–∞–ø–∞–º –≤ –ø–∞–ø–∫–µ ./logs
log_filename = os.path.join(log_dir, "spotify_discord.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=log_filename,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.ini
config = configparser.ConfigParser()
config.read("config.ini")

SPOTIFY_CLIENT_ID = config.get("Spotify", "client_id")
SPOTIFY_CLIENT_SECRET = config.get("Spotify", "client_secret")
SPOTIFY_REDIRECT_URI = config.get("Spotify", "redirect_uri")
SPOTIFY_SCOPE = config.get("Spotify", "scope")
DISCORD_CLIENT_ID = config.get("Discord", "client_id")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Spotify
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=SPOTIFY_CLIENT_ID,
    client_secret=SPOTIFY_CLIENT_SECRET,
    redirect_uri=SPOTIFY_REDIRECT_URI,
    scope=SPOTIFY_SCOPE
))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord
rpc = Presence(DISCORD_CLIENT_ID)
rpc.connect()

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ (1 –ú–ë)
MAX_LOG_SIZE = 1 * 1024 * 1024  # 1 –ú–µ–≥–∞–±–∞–π—Ç

def get_album_cover_url(track):
    """–ü–æ–ª—É—á–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–∞."""
    images = track['album']['images']
    if images:
        return images[0]['url']  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return None

def update_discord_presence(track, playback):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Discord."""
    progress = playback['progress_ms'] // 1000
    duration = track['duration_ms'] // 1000
    track_name = track['name']
    artist_name = ', '.join(artist['name'] for artist in track['artists'])
    cover_url = get_album_cover_url(track)

    # –°—Å—ã–ª–∫–∏
    track_url = track['external_urls']['spotify']  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫
    github_url = "https://github.com/kelthic"  # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ –Ω–∞ GitHub

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    end_time = time.time() + (duration - progress)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    rpc.update(
        state=f"üìúTitle: {track_name}",
        details=f"üó£Artist: {artist_name}",
        buttons=[  # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            {"label": "üéß Listen in Spotify", "url": track_url},
            {"label": "üåê Author", "url": github_url}
        ],
        large_image=cover_url,
        large_text=f"{artist_name} - {track_name}",
        start=time.time() - progress,
        end=end_time
    )
    logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫: {artist_name} - {track_name}")
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {artist_name} - {track_name}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
last_track_id = None
try:
    reset_log(log_filename)  # –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã

    while True:
        try:
            playback = sp.current_playback()
            if playback and playback['is_playing']:
                current_track = playback['item']
                current_track_id = current_track['id']

                if current_track_id != last_track_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Ç—Ä–µ–∫–∞
                    update_discord_presence(current_track, playback)
                    last_track_id = current_track_id
            else:
                rpc.clear()
                last_track_id = None
                logger.info("–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
                print("–ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ –∏ –æ—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
        if os.path.exists(log_filename) and os.path.getsize(log_filename) > MAX_LOG_SIZE:
            reset_log(log_filename)

        time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
except KeyboardInterrupt:
    logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
